export default {
  // Common
  common: {
    confirm: 'Confirm',
    cancel: 'Cancel',
    save: 'Save',
    delete: 'Delete',
    edit: 'Edit',
    add: 'Add',
    search: 'Search',
    loading: 'Loading...',
    success: 'Success',
    error: 'Error',
    warning: 'Warning',
    info: 'Info',
    submit: 'Submit',
    reset: 'Reset',
    refresh: 'Refresh',
    close: 'Close',
    back: 'Back',
    next: 'Next',
    previous: 'Previous',
    ok: 'OK',
    yes: 'Yes',
    no: 'No',
    enable: 'Enable',
    disable: 'Disable',
    copy: 'Copy',
    paste: 'Paste',
    clear: 'Clear',
    select: 'Select',
    selectAll: 'Select All',
    deselect: 'Deselect',
    expand: 'Expand',
    collapse: 'Collapse',
    more: 'More',
    less: 'Less',
    view: 'View',
    hide: 'Hide',
    pleaseEnter: 'Please enter',
    pleaseSelect: 'Please select',
    download: 'Download',
    upload: 'Upload',
    export: 'Export',
    import: 'Import',
    settings: 'Settings',
    help: 'Help',
    about: 'About',
    version: 'Version',
    status: 'Status',
    name: 'Name',
    description: 'Description',
    type: 'Type',
    value: 'Value',
    action: 'Action',
    actions: 'Actions',
    time: 'Time',
    date: 'Date',
    size: 'Size',
    count: 'Count',
    total: 'Total',
    page: 'Page',
    pageSize: 'Page Size',
    noData: 'No Data',
    noResult: 'No Results',
    retry: 'Retry',
    timeout: 'Timeout',
    networkError: 'Network Error',
    serverError: 'Server Error',
    unknownError: 'Unknown Error',
    invalidInput: 'Invalid Input',
    required: 'Required',
    optional: 'Optional',
    placeholder: 'Please enter...',
    selectPlaceholder: 'Please select...',
    selectedItems: 'Selected Items',
    batchOperation: 'Batch Operation',
    somethingWentWrong: 'Something went wrong',
    unexpectedErrorMessage: 'Sorry, the application encountered an unexpected error. Please try refreshing the page or contact technical support.',
    refreshPage: 'Refresh Page',
    errorDetails: 'Error Details (Development Mode)',
    errorId: 'Error ID',
    errorMessage: 'Error Message',
    operation: 'Operation',
    operationSuccess: 'Operation Successful',
    operationFailed: 'Operation Failed',
    pleaseSelectItems: 'Please select items to {{operation}}',
    paginationTotal: '{{start}}-{{end}} of {{total}} items',
    items: 'items',
  },

  // Navigation
  navigation: {
    assistant: 'AI Assistant',
    settings: 'Settings',
    about: 'About',
  },

  nav: {
    assistant: 'AI Assistant',
    mcpTools: 'MCP Tools',
    providers: 'Providers',
    settings: 'Settings',
  },

  // Header
  header: {
    profile: 'Profile',
    logout: 'Logout',
    user: 'User',
  },

  // AI Assistant
  assistant: {
    title: 'AI Assistant',
    notInitialized: 'Assistant not initialized',
    initializePrompt: 'Please configure AI provider and model first, then initialize the assistant',
    initializeButton: 'Initialize Assistant',
    initializeFailed: 'Initialization failed',
    configTitle: 'Assistant Configuration',
    sendMessage: 'Send Message',
    placeholder: 'Ask AI assistant... (Shift+Enter for new line, Enter to send)',
    send: 'Send',
    newConversation: 'New Conversation',
    conversationHistory: 'Conversation History',
    clearHistory: 'Clear History',
    sendFailed: 'Send failed',
    copySuccess: 'Copied successfully',
    newConversationName: 'New Conversation',
    loadingConfig: 'Loading configuration...',
    configLoadFailed: 'Configuration load failed',
    configUnavailable: 'Configuration data unavailable',
    conversations: 'Conversations',
    currentConversation: 'Current Conversation',
    clearConversation: 'Clear Conversation',
    deleteConversation: 'Delete Conversation',
    exportConversation: 'Export Conversation',
    messageInput: 'Enter message...',
    noConversations: 'No conversations',
    noMessages: 'No messages',
    conversationCreated: 'Conversation created',
    conversationDeleted: 'Conversation deleted',
    conversationCleared: 'Conversation cleared',
    messageSent: 'Message sent',
    messageError: 'Message send failed',
    thinking: 'Thinking...',
    generating: 'Generating...',
    user: 'User',
    assistant: 'Assistant',
    ai: 'AI Assistant',
    system: 'System',
    role: 'Role',
    content: 'Content',
    timestamp: 'Timestamp',
    tokens: 'Tokens',
    model: 'Model',
    provider: 'Provider',
    conversationTitle: 'Conversation Title',
    editTitle: 'Edit Title',
    saveTitle: 'Save Title',
    titleSaved: 'Title saved',
    copyMessage: 'Copy Message',
    messageCopied: 'Message copied',
    regenerate: 'Regenerate',
    stop: 'Stop',
    continue: 'Continue',
    errorRetry: 'Error occurred, please retry',
    toolUsed: 'Tool call used',
    initialized: 'Initialized',
    messagesCount: 'messages',
    configure: 'Configure',
    ready: 'AI Assistant is ready, start chatting!',
    toolsAvailable: 'AI Assistant Tools:',
    capabilities: 'AI Assistant capabilities:',
    selectProviderModel: 'Please select AI provider and model in configuration first',
    intelligentChat: 'Intelligent Chat',
    toolCalling: 'Tool Calling',
    codeGeneration: 'Code Generation',
    questionAnswering: 'Question Answering',
    moreTools: 'More',
  },

  // Settings
  settings: {
    title: 'System Settings',
    description: 'Configure AI providers, models and system parameters',
    providers: 'AI Providers',
    models: 'Model Management',
    system: 'System Settings',
    about: 'About',
    version: 'Version Info',
    buildTime: 'Build Time',
    sourceCode: 'Source Code',
    general: 'General Settings',
    theme: 'Theme',
    language: 'Language',
    light: 'Light',
    dark: 'Dark',
    chinese: 'Chinese',
    english: 'English',
    apiKeys: 'API Keys',
    provider: 'Provider',
    apiKey: 'API Key',
    key: 'Key',
    addApiKey: 'Set Key',
    editApiKey: 'Edit API Key',
    deleteApiKey: 'Delete API Key',
    testConnection: 'Test Connection',
    connectionSuccess: 'Connection successful',
    connectionFailed: 'Connection failed',
    defaultProvider: 'Default Provider',
    defaultModel: 'Default Model',
    chatSettings: 'Chat Settings',
    maxTokens: 'Max Tokens',
    temperature: 'Temperature',
    topP: 'Top-p',
    streamResponse: 'Stream Response',
    saveSettings: 'Save Settings',
    resetSettings: 'Reset Settings',
    settingsSaved: 'API key set successfully',
    settingsReset: 'Settings reset',
    pleaseEnterApiKey: 'Please enter API key',
    apiKeyRequired: 'API key is required',
    invalidApiKey: 'Invalid API key format',
    apiKeyTooShort: 'API key too short',
    openaiKeyFormat: 'OpenAI API key should start with "sk-"',
    anthropicKeyFormat: 'Anthropic API key should start with "sk-ant-"',
    appVersion: 'App Version',
  },

  // Parameter Settings
  parameterSettings: {
    title: 'Advanced Settings',
    temperatureDesc: 'Creativity: 0-2',
    maxTokensDesc: 'Max output length',
    topPDesc: 'Diversity: 0-1',
  },

  // Model Selector
  modelSelector: {
    title: 'Model Selection',
    aiProvider: 'AI Provider',
    model: 'Model',
    available: 'available',
    selectProvider: 'Select AI Provider',
    selectModel: 'Select Model',
    healthy: 'Healthy',
    enabled: 'Enabled',
    disabled: 'Disabled',
  },

  // Language Switcher
  languageSwitcher: {
    language: 'Language',
    chinese: '中文',
    english: 'English',
  },

  // Tool Selector
  toolSelector: {
    title: 'Tool Selection',
    availableTools: 'Available Tools',
    selectPrompt: 'Please select a tool',
    noToolsAvailable: 'No tools available',
  },

  // MCP Tools
  mcpTools: {
    title: 'MCP Tools',
    description: 'Model Context Protocol Tools Management',
    systemTitle: 'MCP Tools System',
    initializeMCP: 'Initialize MCP',
    notInitialized: 'MCP system not initialized',
    initializePrompt: 'Please initialize MCP system first to use tool features',
    initializeNow: 'Initialize Now',
    searchTools: 'Search tools...',
    searchPlaceholder: 'Search tools...',
    availableTools: 'Available Tools',
    executionLogs: 'Execution Logs',
    refreshLogs: 'Refresh Logs',
    execute: 'Execute',
    executeTool: 'Execute Tool',
    toolName: 'Tool Name',
    toolDescription: 'Description',
    parameters: 'Parameters',
    parameterStructure: 'Parameter Structure',
    actions: 'Actions',
    executeToolTitle: 'Execute Tool',
    close: 'Close',
    confirm: 'Confirm',
    cancel: 'Cancel',
    tools: 'Tools',
    logs: 'Logs',
    initialize: 'Initialize',
    clear: 'Clear',
    result: 'Result',
    executionTime: 'Execution Time',
    running: 'Running',
    pending: 'Pending',
    noTools: 'No tools',
    noLogs: 'No logs',
    noParameters: 'No parameters',
    noParametersRequired: 'No parameters required',
    initializeSuccess: 'Initialization successful',
    initializeFailed: 'Initialization failed',
    executeSuccess: 'Execution successful',
    executeFailed: 'Execution failed',
    clearLogs: 'Clear Logs',
    refreshTools: 'Refresh Tools',
    toolExecuted: 'Tool executed',
    invalidParameters: 'Invalid parameters',
    executionError: 'Execution error',
    connectionError: 'Connection error',
    logLevel: 'Log Level',
    timestamp: 'Timestamp',
    message: 'Message',
    data: 'Data',
    debug: 'Debug',
    detailedData: 'Detailed Data',
    viewStructure: 'View Structure',
    // Tool names and descriptions
    toolNames: {
      yahoo_finance: 'Yahoo Finance',
      stock_analysis: 'Stock Analysis',
      stock_compare: 'Stock Comparison',
      stock_advice: 'Stock Investment Advice',
    },
    toolDescriptions: {
      yahoo_finance: 'Retrieve stock data',
      stock_analysis: 'Analyze technical indicators, fundamentals and risk assessment of individual stocks',
      stock_compare: 'Compare performance and investment value of multiple stocks',
      stock_advice: 'Provide investment advice and risk warnings based on stock analysis',
    },
  },

  // Providers
  providers: {
    title: 'AI Model Management',
    description: 'Configure and manage AI service providers',
    searchProviders: 'Search providers...',
    providerList: 'AI Provider List',
    provider: 'Provider',
    healthStatus: 'Health Status',
    healthy: 'Healthy',
    unhealthy: 'Unhealthy',
    modelCount: 'Model Count',
    modelsCount: 'models',
    apiKey: 'API Key',
    configured: 'Configured',
    notConfigured: 'Not Configured',
    setKey: 'Set Key',
    setAPIKey: 'Set {{provider}} API Key',
    enterAPIKey: 'Please enter API key',
    apiKeyMinLength: 'API key must be at least 10 characters',
    apiKeySecurity: 'Please ensure the security of your API key and do not use it in unsafe environments',
    manageModels: 'Manage Models',
    modelManagement: 'Model Management',
    searchModels: 'Search models...',
    modelName: 'Model Name',
    displayName: 'Display Name',
    maxTokens: 'Max Tokens',
    contextWindow: 'Context Window',
    inputCost: 'Input Cost',
    outputCost: 'Output Cost',
    list: 'AI Provider List',
    searchPlaceholder: 'Search providers...',
    batchEnable: 'Batch Enable',
    batchDisable: 'Batch Disable',
    testing: 'Testing',
    test: 'Test',
    noProviders: 'No providers',
    configureProvider: 'Configure Provider',
    testProvider: 'Test Provider',
    providerConfigured: 'Provider configured',
    providerTested: 'Provider test completed',
    testSuccess: 'Test successful',
    testFailed: 'Test failed',
    connectionTimeout: 'Connection timeout',
    invalidCredentials: 'Invalid credentials',
    serviceUnavailable: 'Service unavailable',
    quotaExceeded: 'Quota exceeded',
    modelType: 'Model Type',
    supportedFeatures: 'Supported Features',
    chat: 'Chat',
    completion: 'Completion',
    embedding: 'Embedding',
    imageGeneration: 'Image Generation',
    codeGeneration: 'Code Generation',
    functionCalling: 'Function Calling',
    streaming: 'Streaming',
    name: 'Provider',
    models: 'Model Count',
    configure: 'Manage Models',
  },

  // Validation
  validation: {
    required: 'This field is required',
    email: 'Please enter a valid email address',
    url: 'Please enter a valid URL',
    number: 'Please enter a valid number',
    integer: 'Please enter a valid integer',
    positive: 'Please enter a positive number',
    min: 'Value cannot be less than {min}',
    max: 'Value cannot be greater than {max}',
    minLength: 'Length cannot be less than {min} characters',
    maxLength: 'Length cannot exceed {max} characters',
    pattern: 'Format is incorrect',
    confirm: 'The two inputs do not match',
    unique: 'This value already exists',
    custom: 'Validation failed',
  },

  // Error Messages
  errors: {
    networkError: 'Network connection error, please check network settings',
    serverError: 'Server error, please try again later',
    timeoutError: 'Request timeout, please try again later',
    authError: 'Authentication failed, please check API key',
    permissionError: 'Insufficient permissions, please contact administrator',
    notFoundError: 'Requested resource not found',
    validationError: 'Data validation failed, please check input',
    rateLimitError: 'Request rate too high, please try again later',
    quotaError: 'Quota exhausted, please upgrade account',
    serviceUnavailable: 'Service temporarily unavailable, please try again later',
    unknownError: 'Unknown error occurred, please contact technical support',
    loadFailed: 'Load failed',
    saveFailed: 'Save failed',
    deleteFailed: 'Delete failed',
    updateFailed: 'Update failed',
    createFailed: 'Create failed',
    connectFailed: 'Connection failed',
    initFailed: 'Initialization failed',
    executeFailed: 'Execution failed',
    parseFailed: 'Parse failed',
    configError: 'Configuration error',
    dependencyError: 'Dependency error',
    versionError: 'Version incompatible',
    formatError: 'Format error',
    encodingError: 'Encoding error',
    compressionError: 'Compression error',
    encryptionError: 'Encryption error',
    decryptionError: 'Decryption error',
    checksumError: 'Checksum error',
    corruptedError: 'Data corrupted',
    incompleteError: 'Data incomplete',
    duplicateError: 'Data duplicate',
    conflictError: 'Data conflict',
    lockError: 'Resource locked',
    busyError: 'System busy',
    maintenanceError: 'System under maintenance',
    upgradeError: 'System upgrading',
    deprecatedError: 'Feature deprecated',
    unsupportedError: 'Feature not supported',
    experimentalError: 'Experimental feature',
    betaError: 'Beta feature',
    previewError: 'Preview feature',
  },

  // Success Messages
  success: {
    saved: 'Saved successfully',
    deleted: 'Deleted successfully',
    updated: 'Updated successfully',
    created: 'Created successfully',
    uploaded: 'Uploaded successfully',
    downloaded: 'Downloaded successfully',
    imported: 'Imported successfully',
    exported: 'Exported successfully',
    copied: 'Copied successfully',
    sent: 'Sent successfully',
    received: 'Received successfully',
    connected: 'Connected successfully',
    disconnected: 'Disconnected successfully',
    initialized: 'Initialized successfully',
    configured: 'Configured successfully',
    tested: 'Tested successfully',
    validated: 'Validated successfully',
    processed: 'Processed successfully',
    completed: 'Completed',
    started: 'Started successfully',
    stopped: 'Stopped successfully',
    paused: 'Paused successfully',
    resumed: 'Resumed successfully',
    reset: 'Reset successfully',
    cleared: 'Cleared successfully',
    refreshed: 'Refreshed successfully',
    synchronized: 'Synchronized successfully',
    backed: 'Backed up successfully',
    restored: 'Restored successfully',
    migrated: 'Migrated successfully',
    upgraded: 'Upgraded successfully',
    installed: 'Installed successfully',
    uninstalled: 'Uninstalled successfully',
    enabled: 'Enabled successfully',
    disabled: 'Disabled successfully',
    activated: 'Activated successfully',
    deactivated: 'Deactivated successfully',
    registered: 'Registered successfully',
    unregistered: 'Unregistered successfully',
    logged: 'Logged successfully',
    archived: 'Archived successfully',
    published: 'Published successfully',
    unpublished: 'Unpublished successfully',
    approved: 'Approved successfully',
    rejected: 'Rejected successfully',
    submitted: 'Submitted successfully',
    cancelled: 'Cancelled successfully',
    confirmed: 'Confirmed successfully',
    verified: 'Verified successfully',
    authenticated: 'Authenticated successfully',
    authorized: 'Authorized successfully',
    encrypted: 'Encrypted successfully',
    decrypted: 'Decrypted successfully',
    compressed: 'Compressed successfully',
    decompressed: 'Decompressed successfully',
    formatted: 'Formatted successfully',
    parsed: 'Parsed successfully',
    generated: 'Generated successfully',
    compiled: 'Compiled successfully',
    deployed: 'Deployed successfully',
    released: 'Released successfully',
    scheduled: 'Scheduled successfully',
    executed: 'Executed successfully',
    monitored: 'Monitored successfully',
    analyzed: 'Analyzed successfully',
    optimized: 'Optimized successfully',
    cleaned: 'Cleaned successfully',
    repaired: 'Repaired successfully',
    maintained: 'Maintained successfully',
  },
  
  // 通知相关
  notifications: {
    // 操作反馈
    operationFailed: 'Operation failed',
    operationWarning: 'Operation warning',
    loading: 'Loading...',
    
    // 默认错误消息
    defaultError: 'Operation failed, please try again',
    defaultWarning: 'Please check your input',
    
    // 操作类型
    create: 'Create',
    update: 'Update',
    delete: 'Delete',
    get: 'Get',
    batch: 'Batch',
    
    // 成功消息
    successProcessed: 'Successfully processed',
    
    // 表单验证
    formValidationFailed: 'Form validation failed',
    submitSuccess: 'Submitted successfully',
  },
  
  // 模态框相关
  modals: {
    // 确认对话框
    confirm: 'Confirm',
    confirmAction: 'Are you sure you want to perform this action?',
    ok: 'OK',
    cancel: 'Cancel',
    
    // 操作类型
    add: 'Add',
    edit: 'Edit',
    delete: 'Delete',
    view: 'View',
    
    // 删除确认
    deleteConfirm: 'Are you sure you want to delete this item? This action cannot be undone.',
    
    // 批量操作
    batchDelete: 'Batch Delete',
    batchEdit: 'Batch Edit',
    batchDeleteConfirm: 'Are you sure you want to delete the selected {{count}} items? This action cannot be undone.',
  },
  
  // API 错误相关
  apiErrors: {
    networkError: 'Network connection failed, please check network settings',
    timeout: 'Request timeout, please try again later',
    unauthorized: 'Unauthorized access, please login again',
    forbidden: 'Insufficient permissions, unable to perform this operation',
    notFound: 'Requested resource not found',
    internalServerError: 'Internal server error, please try again later',
    badRequest: 'Invalid request parameters',
    conflict: 'Operation conflict, please refresh the page and try again',
    tooManyRequests: 'Too many requests, please try again later',
    defaultError: 'Operation failed, please try again later',
    unknownError: 'Unknown error',
  },
  
  // 配置验证相关
  configValidation: {
    selectProvider: 'Please select an AI provider',
    selectModel: 'Please select a model',
    temperatureRange: 'Temperature value must be between 0-2',
    maxTokensRange: 'Max tokens must be between 1-32000',
    topPRange: 'Top P value must be between 0-1',
    providerNotExists: 'Selected provider does not exist',
    modelNotExists: 'Selected model does not exist',
    modelNotEnabled: 'Selected model is not enabled',
    toolNotExists: 'Selected tool does not exist: {{tool}}',
  },

  // 表单验证相关
  formValidation: {
    // 通用验证消息
    required: 'This field is required',
    email: 'Please enter a valid email address',
    url: 'Please enter a valid URL',
    number: 'Please enter a valid number',
    integer: 'Please enter a valid integer',
    minLength: 'Length cannot be less than {{min}} characters',
    maxLength: 'Length cannot exceed {{max}} characters',
    range: 'Please enter a number between {{min}} and {{max}}',
    
    // API Key 验证消息
    apiKey: {
      openai: {
        required: 'Please enter OpenAI API key',
        minLength: 'OpenAI API key must be at least 10 characters',
        pattern: 'OpenAI API key should start with "sk-"',
      },
      anthropic: {
        required: 'Please enter Anthropic API key',
        minLength: 'Anthropic API key must be at least 10 characters',
        pattern: 'Anthropic API key should start with "sk-ant-"',
      },
      google: {
        required: 'Please enter Google API key',
        minLength: 'Google API key must be at least 10 characters',
      },
      azure: {
        required: 'Please enter Azure API key',
        minLength: 'Azure API key must be at least 10 characters',
      },
      baidu: {
        required: 'Please enter Baidu API key',
        minLength: 'Baidu API key must be at least 10 characters',
      },
      alibaba: {
        required: 'Please enter Alibaba Cloud API key',
        minLength: 'Alibaba Cloud API key must be at least 10 characters',
      },
      zhipu: {
        required: 'Please enter Zhipu API key',
        minLength: 'Zhipu API key must be at least 10 characters',
      },
      moonshot: {
        required: 'Please enter Moonshot API key',
        minLength: 'Moonshot API key must be at least 10 characters',
      },
      deepseek: {
        required: 'Please enter DeepSeek API key',
        minLength: 'DeepSeek API key must be at least 10 characters',
      },
      minimax: {
        required: 'Please enter MiniMax API key',
        minLength: 'MiniMax API key must be at least 10 characters',
      },
      xai: {
        required: 'Please enter xAI API key',
        minLength: 'xAI API key must be at least 10 characters',
      },
      generic: {
        required: 'Please enter API key',
        minLength: 'API key must be at least 10 characters',
      },
    },
    
    // 模型名称验证
    modelName: {
      required: 'Please enter model name',
      minLength: 'Model name cannot be empty',
      maxLength: 'Model name cannot exceed 100 characters',
      pattern: 'Model name can only contain letters, numbers, hyphens, underscores and dots',
    },
    
    // 工具名称验证
    toolName: {
      required: 'Please enter tool name',
      minLength: 'Tool name cannot be empty',
      maxLength: 'Tool name cannot exceed 50 characters',
      pattern: 'Tool name can only contain letters, numbers, hyphens and underscores',
    },
    
    // 端口号验证
    port: {
      required: 'Please enter port number',
      integer: 'Port number must be an integer',
      range: 'Port number must be between 1-65535',
    },
    
    // 自定义验证器消息
    confirmPassword: 'The two passwords do not match',
    json: 'Please enter valid JSON format',
    arrayNotEmpty: 'Please select at least one item',
    fileSize: 'File size cannot exceed {{maxSize}}{{unit}}',
  },
  
  tableColumns: {
    actionsTitle: 'Actions',
    status: {
      active: 'Active',
      inactive: 'Inactive',
      enabled: 'Enabled',
      disabled: 'Disabled'
    },
    actions: {
      view: 'View',
      edit: 'Edit',
      delete: 'Delete',
      settings: 'Settings'
    }
  },
  
  errorHandler: {
    notificationTitles: {
      critical: 'Critical Error',
      high: 'Error',
      medium: 'Warning',
      low: 'Info'
    },
    messages: {
      requestFailed: 'Request failed',
      networkConnectionFailed: 'Network connection failed, please check network settings',
      sseConnectionError: 'SSE connection error',
      dataValidationFailed: 'Data validation failed',
      unknownError: 'Unknown error',
      reportErrorFailed: 'Failed to report error'
    }
  },
};