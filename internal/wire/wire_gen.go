// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/gin-gonic/gin"
	"go-springAi/internal/config"
	"go-springAi/internal/controllers"
	"go-springAi/internal/database"
	"go-springAi/internal/dto"
	"go-springAi/internal/handler"
	"go-springAi/internal/provider"
	"go-springAi/internal/repository"
	"go-springAi/internal/service"
	"go-springAi/internal/utils"
	"go.uber.org/zap"
)

// Injectors from wire.go:

// InitializeApp 初始化应用程序
func InitializeApp(configPath string) (*App, func(), error) {
	config, err := ProvideConfig(configPath)
	if err != nil {
		return nil, nil, err
	}
	logger, err := ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	db, err := ProvideDatabase(config)
	if err != nil {
		return nil, nil, err
	}
	jwtManager := ProvideJWTManager(config)
	customValidator := utils.NewCustomValidator()
	repositoryManager := repository.NewRepositoryManager(db)
	mcpService := ProvideMCPService(repositoryManager, logger)
	openAIService := ProvideOpenAIService(config, logger)
	googleAIService, err := ProvideGoogleAIService(config, logger)
	if err != nil {
		return nil, nil, err
	}
	apiKeyService := ProvideAPIKeyService(repositoryManager)
	internalMCPClient := ProvideInternalMCPClient(mcpService)
	stockAnalysisService := ProvideStockAnalysisService(internalMCPClient, logger)
	manager := ProvideProviderManager(openAIService, googleAIService, logger)
	aiAssistantService := ProvideAIAssistantService(mcpService, openAIService, manager, stockAnalysisService, logger)
	mcpController := ProvideMCPController(mcpService, logger)
	aiAssistantController := ProvideAIAssistantController(aiAssistantService, logger)
	stockHandler := ProvideStockHandler(stockAnalysisService, logger)
	aiController := ProvideAIController(manager, apiKeyService, logger)
	engine := ProvideRouter(logger, jwtManager, mcpController, aiController, aiAssistantController, stockHandler)
	app, cleanup := NewApp(config, logger, db, jwtManager, customValidator, repositoryManager, mcpService, openAIService, googleAIService, apiKeyService, stockAnalysisService, aiAssistantService, mcpController, aiAssistantController, stockHandler, manager, aiController, engine)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

// App 应用程序结构
type App struct {
	Config                *config.Config
	Logger                *zap.Logger
	DB                    *database.DB
	JWTManager            *utils.JWTManager
	Validator             *utils.CustomValidator
	RepoManager           repository.RepositoryManager
	MCPService            service.MCPService
	OpenAIService         *service.OpenAIService
	GoogleAIService       *service.GoogleAIService
	APIKeyService         service.APIKeyService
	StockAnalysisService  *service.StockAnalysisService
	AIAssistantService    *service.AIAssistantService
	MCPController         *controllers.MCPController
	AIAssistantController *controllers.AIAssistantController
	StockHandler          *handler.StockHandler
	ProviderManager       *provider.Manager
	AIController          *controllers.AIController
	Router                *gin.Engine
}

// NewApp 创建应用程序实例
func NewApp(config2 *config.Config,
	logger *zap.Logger,
	db *database.DB,
	jwtManager *utils.JWTManager,
	validator *utils.CustomValidator,
	repoManager repository.RepositoryManager,
	mcpService service.MCPService,
	openaiService *service.OpenAIService,
	googleaiService *service.GoogleAIService,
	apiKeyService service.APIKeyService,
	stockAnalysisService *service.StockAnalysisService,
	aiAssistantService *service.AIAssistantService,
	mcpController *controllers.MCPController,
	aiAssistantController *controllers.AIAssistantController,
	stockHandler *handler.StockHandler,
	providerManager *provider.Manager,
	aiController *controllers.AIController,
	router *gin.Engine,
) (*App, func()) {
	app := &App{
		Config:                config2,
		Logger:                logger,
		DB:                    db,
		JWTManager:            jwtManager,
		Validator:             validator,
		RepoManager:           repoManager,
		MCPService:            mcpService,
		OpenAIService:         openaiService,
		GoogleAIService:       googleaiService,
		APIKeyService:         apiKeyService,
		StockAnalysisService:  stockAnalysisService,
		AIAssistantService:    aiAssistantService,
		MCPController:         mcpController,
		AIAssistantController: aiAssistantController,
		StockHandler:          stockHandler,
		ProviderManager:       providerManager,
		AIController:          aiController,
		Router:                router,
	}

	app.initializeMCPSystem()

	cleanup := func() {
		if app.DB != nil {
			app.DB.Close()
		}
		if app.Logger != nil {
			app.Logger.Sync()
		}
	}

	return app, cleanup
}

// initializeMCPSystem 自动初始化MCP系统
func (app *App) initializeMCPSystem() {
	if app.MCPService == nil {
		app.Logger.Warn("MCP service is not available, skipping auto-initialization")
		return
	}

	initReq := &dto.MCPInitializeRequest{
		ProtocolVersion: "2024-11-05",
		Capabilities: dto.MCPCapabilities{
			Tools: &dto.MCPToolsCapability{
				ListChanged: true,
			},
			Logging: &dto.MCPLoggingCapability{},
		},
		ClientInfo: dto.MCPClientInfo{
			Name:    "Auto-initialized MCP Server",
			Version: "1.0.0",
		},
	}

	ctx := context.Background()

	response, err := app.MCPService.Initialize(ctx, initReq)
	if err != nil {
		app.Logger.Error("Failed to auto-initialize MCP system", zap.Error(err), zap.String("module", "startup"), zap.String("operation", "mcp_auto_init"))
		return
	}

	app.Logger.Info("MCP system auto-initialized successfully", zap.String("protocolVersion", response.ProtocolVersion), zap.String("serverName", response.ServerInfo.Name), zap.String("serverVersion", response.ServerInfo.Version), zap.String("module", "startup"), zap.String("operation", "mcp_auto_init"))
}
