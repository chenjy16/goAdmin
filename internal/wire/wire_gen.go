// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"admin/internal/config"
	"admin/internal/controllers"
	"admin/internal/database"
	"admin/internal/repository"
	"admin/internal/services"
	"admin/internal/utils"
	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
)

// Injectors from wire.go:

// InitializeApp 初始化应用程序
func InitializeApp(configPath string) (*App, func(), error) {
	config, err := ProvideConfig(configPath)
	if err != nil {
		return nil, nil, err
	}
	logger, err := ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	db, err := ProvideDatabase(config)
	if err != nil {
		return nil, nil, err
	}
	jwtManager := ProvideJWTManager(config)
	customValidator := utils.NewCustomValidator()
	repositoryManager := repository.NewRepositoryManager(db)
	userService := ProvideUserService(repositoryManager)
	userController := controllers.NewUserController(userService)
	engine := ProvideRouter(userService, logger)
	app, cleanup := NewApp(config, logger, db, jwtManager, customValidator, repositoryManager, userService, userController, engine)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

// App 应用程序结构
type App struct {
	Config         *config.Config
	Logger         *zap.Logger
	DB             *database.DB
	JWTManager     *utils.JWTManager
	Validator      *utils.CustomValidator
	RepoManager    repository.RepositoryManager
	UserService    *services.UserService
	UserController *controllers.UserController
	Router         *gin.Engine
}

// NewApp 创建应用程序实例
func NewApp(config2 *config.Config,
	logger *zap.Logger,
	db *database.DB,
	jwtManager *utils.JWTManager,
	validator *utils.CustomValidator,
	repoManager repository.RepositoryManager,
	userService *services.UserService,
	userController *controllers.UserController,
	router *gin.Engine,
) (*App, func()) {
	app := &App{
		Config:         config2,
		Logger:         logger,
		DB:             db,
		JWTManager:     jwtManager,
		Validator:      validator,
		RepoManager:    repoManager,
		UserService:    userService,
		UserController: userController,
		Router:         router,
	}

	cleanup := func() {
		if app.DB != nil {
			app.DB.Close()
		}
		if app.Logger != nil {
			app.Logger.Sync()
		}
	}

	return app, cleanup
}
