// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"admin/internal/config"
	"admin/internal/controllers"
	"admin/internal/database"
	"admin/internal/repository"
	"admin/internal/service"
	"admin/internal/utils"
	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
)

// Injectors from wire.go:

// InitializeApp 初始化应用程序
func InitializeApp(configPath string) (*App, func(), error) {
	config, err := ProvideConfig(configPath)
	if err != nil {
		return nil, nil, err
	}
	logger, err := ProvideLogger(config)
	if err != nil {
		return nil, nil, err
	}
	db, err := ProvideDatabase(config)
	if err != nil {
		return nil, nil, err
	}
	jwtManager := ProvideJWTManager(config)
	customValidator := utils.NewCustomValidator()
	repositoryManager := repository.NewRepositoryManager(db)
	mcpService := ProvideMCPService(repositoryManager, logger)
	mcpController := ProvideMCPController(mcpService, logger)
	engine := ProvideRouter(mcpController, logger)
	app, cleanup := NewApp(config, logger, db, jwtManager, customValidator, repositoryManager, mcpService, mcpController, engine)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

// App 应用程序结构
type App struct {
	Config        *config.Config
	Logger        *zap.Logger
	DB            *database.DB
	JWTManager    *utils.JWTManager
	Validator     *utils.CustomValidator
	RepoManager   repository.RepositoryManager
	MCPService    service.MCPService
	MCPController *controllers.MCPController
	Router        *gin.Engine
}

// NewApp 创建应用程序实例
func NewApp(config2 *config.Config,
	logger *zap.Logger,
	db *database.DB,
	jwtManager *utils.JWTManager,
	validator *utils.CustomValidator,
	repoManager repository.RepositoryManager,
	mcpService service.MCPService,
	mcpController *controllers.MCPController,
	router *gin.Engine,
) (*App, func()) {
	app := &App{
		Config:        config2,
		Logger:        logger,
		DB:            db,
		JWTManager:    jwtManager,
		Validator:     validator,
		RepoManager:   repoManager,
		MCPService:    mcpService,
		MCPController: mcpController,
		Router:        router,
	}

	cleanup := func() {
		if app.DB != nil {
			app.DB.Close()
		}
		if app.Logger != nil {
			app.Logger.Sync()
		}
	}

	return app, cleanup
}
