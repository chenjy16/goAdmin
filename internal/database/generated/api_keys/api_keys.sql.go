// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: api_keys.sql

package api_keys

import (
	"context"
	"database/sql"
)

const checkAPIKeyExists = `-- name: CheckAPIKeyExists :one
SELECT COUNT(*) FROM api_keys
WHERE user_id = ?1 AND provider_type = ?2 AND is_active = TRUE
`

type CheckAPIKeyExistsParams struct {
	UserID       int64  `json:"user_id"`
	ProviderType string `json:"provider_type"`
}

func (q *Queries) CheckAPIKeyExists(ctx context.Context, arg CheckAPIKeyExistsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkAPIKeyExists, arg.UserID, arg.ProviderType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAPIKeysByProvider = `-- name: CountAPIKeysByProvider :one
SELECT COUNT(*) FROM api_keys
WHERE provider_type = ?1 AND is_active = TRUE
`

func (q *Queries) CountAPIKeysByProvider(ctx context.Context, providerType string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAPIKeysByProvider, providerType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAPIKeysByUser = `-- name: CountAPIKeysByUser :one
SELECT COUNT(*) FROM api_keys
WHERE user_id = ?1 AND is_active = TRUE
`

func (q *Queries) CountAPIKeysByUser(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAPIKeysByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (
    user_id, provider_type, encrypted_key, key_hash, is_active
) VALUES (
    ?1, ?2, ?3, ?4, ?5
) RETURNING id, user_id, provider_type, encrypted_key, key_hash, is_active, created_at, updated_at
`

type CreateAPIKeyParams struct {
	UserID       int64        `json:"user_id"`
	ProviderType string       `json:"provider_type"`
	EncryptedKey string       `json:"encrypted_key"`
	KeyHash      string       `json:"key_hash"`
	IsActive     sql.NullBool `json:"is_active"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, createAPIKey,
		arg.UserID,
		arg.ProviderType,
		arg.EncryptedKey,
		arg.KeyHash,
		arg.IsActive,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProviderType,
		&i.EncryptedKey,
		&i.KeyHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateAPIKey = `-- name: DeactivateAPIKey :exec
UPDATE api_keys 
SET is_active = FALSE, updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?1 AND provider_type = ?2
`

type DeactivateAPIKeyParams struct {
	UserID       int64  `json:"user_id"`
	ProviderType string `json:"provider_type"`
}

func (q *Queries) DeactivateAPIKey(ctx context.Context, arg DeactivateAPIKeyParams) error {
	_, err := q.db.ExecContext(ctx, deactivateAPIKey, arg.UserID, arg.ProviderType)
	return err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM api_keys
WHERE user_id = ?1 AND provider_type = ?2
`

type DeleteAPIKeyParams struct {
	UserID       int64  `json:"user_id"`
	ProviderType string `json:"provider_type"`
}

func (q *Queries) DeleteAPIKey(ctx context.Context, arg DeleteAPIKeyParams) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKey, arg.UserID, arg.ProviderType)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT id, user_id, provider_type, encrypted_key, key_hash, is_active, created_at, updated_at 
FROM api_keys
WHERE user_id = ?1 AND provider_type = ?2 AND is_active = TRUE
LIMIT 1
`

type GetAPIKeyParams struct {
	UserID       int64  `json:"user_id"`
	ProviderType string `json:"provider_type"`
}

func (q *Queries) GetAPIKey(ctx context.Context, arg GetAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKey, arg.UserID, arg.ProviderType)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProviderType,
		&i.EncryptedKey,
		&i.KeyHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAPIKeyByID = `-- name: GetAPIKeyByID :one
SELECT id, user_id, provider_type, encrypted_key, key_hash, is_active, created_at, updated_at 
FROM api_keys
WHERE id = ?1 LIMIT 1
`

func (q *Queries) GetAPIKeyByID(ctx context.Context, id int64) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKeyByID, id)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProviderType,
		&i.EncryptedKey,
		&i.KeyHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAPIKeysByProvider = `-- name: ListAPIKeysByProvider :many
SELECT id, user_id, provider_type, encrypted_key, key_hash, is_active, created_at, updated_at 
FROM api_keys
WHERE provider_type = ?1 AND is_active = TRUE
ORDER BY created_at DESC
`

func (q *Queries) ListAPIKeysByProvider(ctx context.Context, providerType string) ([]ApiKey, error) {
	rows, err := q.db.QueryContext(ctx, listAPIKeysByProvider, providerType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProviderType,
			&i.EncryptedKey,
			&i.KeyHash,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAPIKeysByUser = `-- name: ListAPIKeysByUser :many
SELECT id, user_id, provider_type, encrypted_key, key_hash, is_active, created_at, updated_at 
FROM api_keys
WHERE user_id = ?1 AND is_active = TRUE
ORDER BY created_at DESC
`

func (q *Queries) ListAPIKeysByUser(ctx context.Context, userID int64) ([]ApiKey, error) {
	rows, err := q.db.QueryContext(ctx, listAPIKeysByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProviderType,
			&i.EncryptedKey,
			&i.KeyHash,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKey = `-- name: UpdateAPIKey :one
UPDATE api_keys 
SET encrypted_key = ?3, key_hash = ?4, updated_at = CURRENT_TIMESTAMP
WHERE user_id = ?1 AND provider_type = ?2 AND is_active = TRUE
RETURNING id, user_id, provider_type, encrypted_key, key_hash, is_active, created_at, updated_at
`

type UpdateAPIKeyParams struct {
	UserID       int64  `json:"user_id"`
	ProviderType string `json:"provider_type"`
	EncryptedKey string `json:"encrypted_key"`
	KeyHash      string `json:"key_hash"`
}

func (q *Queries) UpdateAPIKey(ctx context.Context, arg UpdateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, updateAPIKey,
		arg.UserID,
		arg.ProviderType,
		arg.EncryptedKey,
		arg.KeyHash,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProviderType,
		&i.EncryptedKey,
		&i.KeyHash,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
